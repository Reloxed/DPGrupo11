// Jesus

- @ElementCollection -> lo colocamos solo en datatypes ? eso pone en la teoría ...

- **Ojo** el ticker debe ser unico así que hay que ponerlo de anotación donde esté como en FixUpTask por ejemplo.

- Relación:[Costumer]1-->0..*[Application] ->Propuesta si en el caso de que no se pudiera ordenar

-Atributos de credit card En conjunto son unicos?para poner la anotación


// Fran

- En el domain uml en useraccount debería llevar un {Unique}, en la clase java que nos dan ya lleva una anotacion @Unique y tambien viene en la teoria.

- En los uml Authority deberia ser un datatype segun la teoria y las anotaciones de persistenca de su clase en java.

- Lo que dice jesus del ticker tiene razon, las clases donde falta @Unique son Complaint y FixUpTask.

- En la clase fixuptask, no tendria mas sentido poner los atributos startDate y endDate en vez de startMoment y endMoment? Tampoco vas a pedir que al crear una chapuza tengan que poner a que hora de que dia empieza y termina xD

- En los uml messageBox aparece en cursiva pero creo que eso se quedo asi porque antes era una clase abstracta. Creo que ahora deberia ir con la fuente normal.

- En la clase Section de java falta una anotacion @URL en el getPicture.

- En la clase SystemConfiguration el getListCreditCaarMakes deberia tener un @NotBlank en vez del @NotEmpty que tiene.

- Segun el requisito 38.5.1 para hacer la query la relación que hay Complaint->FixUpTask deberia ser <->

//Carlos

- Añadir anotacion @Temporal al atributo moment en la clase Complaint.

- Atributos de la clase customer/handyWorker tienen anotacion cascadeType.ALL

- @Temporal(TemporalType.TIMESTAMP) en el atributo getSearchMoment() en la clase Finder, para indicar a JPA que tiene que guardar una fecha junto a su hora.

- Eliminar el mappedBy = "handyWorker" en el atributo getCollections() de la clase handyWorker, ya que no es una relacion bidireccional.

- En la clase HandyWorker en el atributo getFinder() y getCurriculum() falta la anotacion @oneToOne

- Añadir @Valid a getNOtes() y @Temporal en getPublishedMoment() en la clase Report

- Añadir @Valid a getSponsorships() en la clase sponsor.

- Añadir @URL a getPictures() en Tutorial.

- Cambiar atributos laws por applicableLaws enl a clase Warranty o cambiar el nombre en el UML por laws.

//Lucia
- El patrón de Status de Application es así : @Pattern(regexp = "^PENDING|ACCEPTED|REJECTED$”). Como está puesto ahora mismo solo busca en el principio y en el final del texto, o sea, que valdría algo como ‘PENDING123’, y eso es erróneo. También hay que cambiarlo en el UML que no sé quién ha cambiado eso porque creo que estaba bien. Ocurre lo mismo con Priority en Message
- En Money hay un método entero comentado.
- En Complaint, si aún no hemos encontrado la solución a lo del Ticker, por qué no lo dejamos mientras con el @Column(unique=true)? Lo digo para tener algo al menos en lugar de nada. Por ejemplo, en Curriculum está.
- En Customer hay un comentario con un interrogante. FixUpTask no es una composición y Complaint tampoco
- El telefono de endorserRecord tiene un patrón pero el de actor no, creo que no debería tenerlo ninguno de los dos porque es opcional que siga ese patrón no?
- En Finder hay comentarios con ?
- Finder -> FixUpTask no es OneToMany
- CreditCard - Sponsorship: el ‘has’ está orientado hacia el lado contrario.
- Revisar relación Tutorial - Sponsor 