// Luc’a

- Hay que cambiar todos los 0..* por *
- Rol receiver por recipient.
- Cambiar datatype Priority por patr—n, lo mismo con Status. De hecho hemos creado el datatype Status pero luego no lo hemos llamado en Application.
- En el patr—n del ticker sobra un \
- Si Money va a tener solo un atributo llamado cantidad que es de tipo double, Àpor quŽ no eliminar el datatype y utilizar directamente double?
- FixUpTask -> Category , cambiar areOrganisedIn por belongsTo que es el verbo utilizado en los requisitos.
- Deber’amos quitar la clase WorkPlan ya que est‡ vac’a y que FixUpTask sea directamente una composici—n de Phase.
- Hay que poner bien la nota del patr—n del telŽfono.
- ÀCambiar CreditCard a entidad? En el requisito 24 pone que el sistema DEBE almacenar la informaci—n de las tarjetas de crŽdito, por lo tanto creo que deber’amos ponerlo como entidad y unirlo con relaciones a las entidades que la precisen (Sponsorship y Application)
- ProfessionalRecord: cambiar link attachment por attachment, para que quede m‡s limpio.
- En el Finder faltan los atributos warranty y category (requisito 31)
- Customer Ñ> Complaint cambiar manages por writes (requisito 32)
- Hay que poner en una nota lo que pone en el requisito 41 sobre los resultados que devuelve el Finder.
- No veo la direccionalidad en la relaci—n HandyWorker <Ñ> Tutorial, yo lo pondr’a HandyWorker Ñ> Tutorial


<<<<<<< HEAD
// Fran

- Segun las diapositivas, en el uml los atributos de useraccount y authority deben llevar un +
- En actor no hay get ni set para el atributo systemConfiguration?¿
- Duda, ¿por qué no se ponia relacion entre actor y systemconf?
- Si la relacion application-fixuptask es bidireccional, falta el atributo fixuptask en la clase application
- En el uml -> application -> comment o ponemos [0..1] o {NotBlank}
- En uml casi todos los String siguen como [0..*] y la mayoria se pueden poner como solo 1 string [0..1] y lo mismo con java y los collection<String>. Da igual que sean URL
- En la clase complaint el atributo report falta la anotacion @Valid en el get.
- En la clase customer falta un atributo collection<Complaint> y lo que ha dicho pablo de los @notnull
- En la clase endorsment el atributo customer es de tipo actor en vez de de tipo customer.
- En la clase messageBox sobra el atributo actor
- En la clase sponsorship al get de tutorial le falta un @Valid


// Corchuelo

- Modelar los datatype como priority o status, como una simple cadena con un patrón.
- Boolean hay que ponerlo en mayusculas, es decir, en UML no puede ser null y se pone con mayusculas.
- Las fechas de fixuptask debe ser en un futuro forzosamente, es decir, una restriccion. Con que esté en el futuro es más que suficiente.
- Workplan hay que quitarlo SOLO del modelo de dominio. En el conceptual puede estar bien.
- Un numero de telefono debe cumplir un patron, Y SI NO, se le pide una confirmación al usuario y si dice que si, se guarda.
- Hay que añadir un mensaje de bienvenida en el systemConfiguration.
- Los tickers deben ser únicos. Hay que planificar tareas de investigación para resolver este problema y el de los mensajes de bienvenida.
- Que una palabra esté en plural no significa que sea una colección. Puede ser una cadena separada.
- Hay que revisar las direcciones para navegar por ejemplo desde la clave ajena al contrario.
=======
//Carlos
-Otra solución a lo de workplan puede ser incluir workplan como atibuto de handyWorker
(String: workPlan[0..1]). Siendo bidireccional handyworker-application, asi cada application
de la coleccion tendra asignado su handyWorker junto a su workPlan si la application ha sido
aceptada. Poniendo una relacion 1--1..* de application a phase, asi esa application que puede
acceder al workplan del handyworker tiene una o multiples phases.

-Relacion de finder a category oneToOne, en el requisito 31 especifica "a category to which the task must belong"


-Relacion de complaint report oneToOne, en el requisito 33 "Referees write reports on the complanints"


//Pablo
- WorkPlan fuera.
- pictures de tutorial es 0..1 no 0..*
- faltala 'd' de lastUpdated en tutorial.
- las colecciones de String de SystemConfiguration tienenge que ser Strings --> de 0..* a 0..1
- Sugerencia: cambiar listCreditCardMakes por listCreditCardBrands.
- Status fuera --> poner como atributo en la clase que haga falta.
- En la clase Customer hay anotaciones @NotNull en dos atributos que son collections
- En la clase endorsment el atributo customer es de tipo actor en vez de de tipo customer.
>>>>>>> master
