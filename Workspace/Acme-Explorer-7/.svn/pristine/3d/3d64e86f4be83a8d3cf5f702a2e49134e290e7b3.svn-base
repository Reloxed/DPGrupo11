package services;

import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Actor;
import domain.Administrator;
import domain.Folder;
import domain.Message;
import domain.SpamWord;

import repositories.MessageRepository;

@Service
@Transactional
public class MessageService {

	// Managed Repository
	@Autowired
	private MessageRepository		messageRepository;

	// Supporting services
	
	@Autowired
	private SpamWordService			spamWordService;
	
	@Autowired
	private AdministratorService	administratorService;
	@Autowired
	private ActorService			actorService;
	@Autowired
	private FolderService			folderService;


	// Constructors

	public MessageService() {
		super();
	}

	// Simple CRUD methods
	
	
	// An actor who is authenticated must be able to exchange messages with other actors
	public Message save (Message message) {
		Message result;
		Actor principal;
		Date moment;
		boolean isSpam;
		Collection<SpamWord> spamWords;
		Folder folder;
		Message copy;
		
		
		Assert.notNull(message);
		
		principal = this.actorService.findByPrincipal();
		
		Assert.notNull(principal);
		
		moment = new Date(System.currentTimeMillis() - 1);
		isSpam = false;
		
		spamWords = this.spamWordService.findAll();
		for (SpamWord spam : spamWords) {
			if (message.getSubject().toLowerCase().contains(spam.getWord().toLowerCase())) {
				isSpam = true;
				break;
			} else if (message.getBody().toLowerCase().contains(spam.getWord().toLowerCase())){
				isSpam = true;
				break;
			}
		}
		
			message.setMoment(moment);
			message.setIsSpam(isSpam);
			message.setSender(principal);
			Assert.isTrue(message.getRecipient().getId() != principal.getId());
			
			folder = this.folderService.findInBoxFolderActor(message.getRecipient());
			Assert.notNull(folder);
			
			message.setFolder(folder);
			
			if (isSpam) {
				folder = this.folderService.findSpamBoxFolderActor(message.getRecipient());
				Assert.notNull(folder);
				message.setFolder(folder);
				principal.setIsSuspicious(true);
			}
			
			
			result = this.messageRepository.save(message);
			Assert.notNull(result);
	
			copy = new Message();
			copy.setSubject(message.getSubject());
			copy.setBody(message.getBody());
			copy.setMoment(message.getMoment());
			copy.setIsSpam(message.getIsSpam());
			copy.setPriority(message.getPriority());
			copy.setRecipient(message.getRecipient());
			copy.setSender(message.getSender());
			copy.setFolder(this.folderService.findOutBoxFolderActor(principal));			
			this.messageRepository.save(copy);
			
			
			/*
			Collection<Message> sentMessagesUpdated;
			Collection<Message> receivedMessagesUpdated;
			
			receivedMessagesUpdated = copy.getRecipient().getReceivedMessages();
		    sentMessagesUpdated  = principal.getSentMessages();
			
			
			receivedMessagesUpdated.remove(m);
			sentMessagesUpdated.remove(m);
			copy.getRecipient().setReceivedMessages(receivedMessagesUpdated);
			principal.setSentMessages(sentMessagesUpdated);
			*/
			
			return result;

	}
	
	
	public void delete (Message message) {
		Actor principal;
		Folder folder;
		Folder trashBox;
		
		Assert.notNull(message);
		Assert.isTrue(message.getId() != 0);
		
		
		
		principal = this.actorService.findByPrincipal();
		Assert.notNull(principal);
		
		Assert.isTrue(principal.getReceivedMessages().contains(message) || principal.getSentMessages().contains(message));
		
		folder = message.getFolder();
		
		
		if (folder.getIsSystem() && folder.getName().equals("trash box")) {
			
			this.messageRepository.delete(message);
			
		} else {
			trashBox = this.folderService.findTrashBoxFolderActor(principal);
			this.move(message, trashBox);
			
		}
		
	
	}
	
	
	
	
	
	
	// Other business methods

	
	public void move(Message message, Folder destination) {
		
		Actor principal;
		Folder origin;
		Collection<Message> updatedOriginFolder;
		Collection<Message> updatedDestinationFolder;
		Message m;
		
		Assert.notNull(message);
		Assert.notNull(destination);
		
		Assert.isTrue(message.getId() != 0);
		Assert.isTrue(destination.getId() != 0);
		
		origin = message.getFolder();
		Assert.isTrue(origin.getId() != destination.getId());
		
		principal = this.actorService.findByPrincipal();
		Assert.notNull(principal);
		
		Assert.isTrue(principal.getReceivedMessages().contains(message) || principal.getSentMessages().contains(message));
		Assert.isTrue(principal.getFolders().contains(origin));
		Assert.isTrue(principal.getFolders().contains(destination));
		
		message.setFolder(destination);
		m = this.messageRepository.save(message);
		
		updatedOriginFolder = origin.getMessages();
		updatedDestinationFolder = destination.getMessages();
		
		updatedOriginFolder.remove(m);
		updatedDestinationFolder.add(m);
		
		origin.setMessages(updatedOriginFolder);
		destination.setMessages(updatedDestinationFolder);
		
	}
	
	
	
	public void broadcast (final Message m) {
		Administrator principle;
		String subject, body, priority;
		Collection<Actor> actors;
		boolean isSpam;
		Date currentMoment;
		
		Assert.notNull(m);
		
		principle = this.administratorService.findByPrincipal();
		Assert.notNull(principle);
		
	
		subject = m.getSubject();
		body = m.getBody();
		priority = m.getPriority();
		isSpam = false;
		
		currentMoment = new Date(System.currentTimeMillis() - 1);
		
		actors = this.actorService.findAll();
		for (final Actor actor : actors) {
			if (!(actor instanceof Administrator)) {
				Message message = new Message();
				message.setSubject(subject);
				message.setBody(body);
				message.setPriority(priority);
				message.setSender(principle);
				message.setRecipient(actor);
				message.setIsSpam(isSpam);
				message.setMoment(currentMoment);
				message.setFolder(this.folderService.findNotificationFolderActor(actor));
				this.messageRepository.save(message);
			}
		}
	}
}