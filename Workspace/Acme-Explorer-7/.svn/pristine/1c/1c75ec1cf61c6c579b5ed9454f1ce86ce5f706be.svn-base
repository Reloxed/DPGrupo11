
package controllers.ranger;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.CurriculumService;
import services.RangerService;
import controllers.AbstractController;
import domain.Actor;
import domain.Curriculum;
import domain.EducationRecord;
import domain.EndorserRecord;
import domain.MiscellaneousRecord;
import domain.ProfessionalRecord;

@Controller
@RequestMapping("/curriculum/ranger")
public class CurriculumRangerController extends AbstractController {

	// Services

	@Autowired
	private CurriculumService	curriculumService;

	@Autowired
	private RangerService		rangerService;


	// Constructors

	public CurriculumRangerController() {
		super();
	}

	// Listing

	//Displaying
	@RequestMapping(value = "/display", method = RequestMethod.GET)
	public ModelAndView list() {
		final ModelAndView result;
		Curriculum curriculum;
		final Actor principal;

		curriculum = this.curriculumService.findCurriculumByPrincipal();
		principal = this.rangerService.findByPrincipal();

		result = new ModelAndView("curriculum/display");
		result.addObject("curriculum", curriculum);
		result.addObject("principal", principal);

		return result;

	}

	// Creation ---------------------------------------------------------------
	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create() {
		final ModelAndView result;
		Curriculum curriculum;

		curriculum = this.curriculumService.create();

		result = this.createEditModelAndView(curriculum);

		return result;

	}
	// Edition
	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam final int curriculumId) {
		ModelAndView result;
		Curriculum curriculum;

		curriculum = this.curriculumService.findOne(curriculumId);
		Assert.notNull(curriculum);
		result = this.createEditModelAndView(curriculum);

		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = {
		"save", "PRcomments"
	})
	public ModelAndView save(@Valid final Curriculum curriculum, final List<String> PRcomments, final BindingResult binding) {
		ModelAndView result;

		if (binding.hasErrors())
			result = this.createEditModelAndView(curriculum);
		else
			try {
				this.curriculumService.save(curriculum);
				result = new ModelAndView("redirect:display.do");
			} catch (final Throwable oops) {
				result = this.createEditModelAndView(curriculum, "curriculum.commit.error");
			}

		return result;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	public ModelAndView delete(final Curriculum curriculum, final BindingResult binding) {
		ModelAndView result;

		try {
			this.curriculumService.delete(curriculum);
			result = new ModelAndView("redirect: /welcome/index");
		} catch (final Throwable oops) {
			result = this.createEditModelAndView(curriculum, "curriculum.commit.error");
		}

		return result;
	}

	//Ancillary methods
	protected ModelAndView createEditModelAndView(final Curriculum curriculum) {
		ModelAndView result;

		result = this.createEditModelAndView(curriculum, null);

		return result;
	}

	protected ModelAndView createEditModelAndView(final Curriculum curriculum, final String messageCode) {
		ModelAndView result;
		final List<String> commentsInPRs;
		final List<String> commentsInERs;
		final List<String> commentsInENRs;
		final List<String> commentsInMRs;

		commentsInPRs = new ArrayList<String>();
		commentsInERs = new ArrayList<String>();
		commentsInENRs = new ArrayList<String>();
		commentsInMRs = new ArrayList<String>();

		if (curriculum.getProfessionalRecords().size() != 0)
			for (final ProfessionalRecord PR : curriculum.getProfessionalRecords())
				if (PR.getComments().size() != 0) {
					String commentsSeparatedWithCommas = "";
					for (final String comment : PR.getComments())
						commentsSeparatedWithCommas += comment + "; ";

					commentsInPRs.add(commentsSeparatedWithCommas);
				} else {
					final String itHasNoComments = "";
					commentsInPRs.add(itHasNoComments);
				}

		if (curriculum.getEducationRecord().size() != 0)
			for (final EducationRecord ER : curriculum.getEducationRecord())
				if (ER.getComments().size() != 0) {
					String commentsSeparatedWithCommas = "";
					for (final String comment : ER.getComments())
						commentsSeparatedWithCommas += comment + "; ";

					commentsInERs.add(commentsSeparatedWithCommas);
				} else {
					final String itHasNoComments = "";
					commentsInERs.add(itHasNoComments);
				}

		if (curriculum.getEndorserRecord().size() != 0)
			for (final EndorserRecord ENR : curriculum.getEndorserRecord())
				if (ENR.getComments().size() != 0) {
					String commentsSeparatedWithCommas = "";
					for (final String comment : ENR.getComments())
						commentsSeparatedWithCommas += comment + "; ";

					commentsInENRs.add(commentsSeparatedWithCommas);
				} else {
					final String itHasNoComments = "";
					commentsInENRs.add(itHasNoComments);
				}

		if (curriculum.getMiscellaneousRecord().size() != 0)
			for (final MiscellaneousRecord MR : curriculum.getMiscellaneousRecord())
				if (MR.getComments().size() != 0) {
					String commentsSeparatedWithCommas = "";
					for (final String comment : MR.getComments())
						commentsSeparatedWithCommas += comment + "; ";

					commentsInMRs.add(commentsSeparatedWithCommas);
				} else {
					final String itHasNoComments = "";
					commentsInMRs.add(itHasNoComments);
				}

		result = new ModelAndView("curriculum/edit");
		result.addObject("curriculum", curriculum);
		result.addObject("commentsInPRs", commentsInPRs);
		result.addObject("commentsInERs", commentsInERs);
		result.addObject("commentsInENRs", commentsInENRs);
		result.addObject("commentsInMRs", commentsInMRs);

		result.addObject("message", messageCode);

		return result;

	}

}
