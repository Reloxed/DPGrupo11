
package services;

import java.util.ArrayList;
import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ExplorerRepository;
import security.LoginService;
import security.UserAccount;
import domain.Administrator;
import domain.Application;
import domain.EmergencyContact;
import domain.Explorer;
import domain.Folder;
import domain.Message;
import domain.SocialIdentity;
import domain.Story;

@Service
@Transactional
public class ExplorerService {

	// Managed Repository
	@Autowired
	private ExplorerRepository		explorerRepository;

	@Autowired
	private FolderService			folderService;

	@Autowired
	private AdministratorService	administratorService;


	// Supporting services

	// Constructors

	public ExplorerService() {
		super();
	}

	// Simple CRUD methods
	public Explorer create() {
		Explorer result;
		result = this.create();
		result.setReceivedMessages(new ArrayList<Message>());
		result.setSentMessages(new ArrayList<Message>());
		result.setSocialIdentities(new ArrayList<SocialIdentity>());
		result.setFolders(this.folderService.createSystemFolders(result));
		result.setEmergencyContacts(new ArrayList<EmergencyContact>());
		result.setApplications(new ArrayList<Application>());
		result.setStories(new ArrayList<Story>());

		return result;
	}

	public Explorer save(final Explorer explorer) {
		final Explorer saved;
		Assert.notNull(explorer);
		saved = this.explorerRepository.save(explorer);
		Assert.notNull(saved);
		saved.getUserAccount().setIsBanned(saved.getIsBanned());
		for (final Folder folder : saved.getFolders())
			this.folderService.save(folder);
		return saved;

	}
	public Explorer findOne(final int explorerId) {
		Explorer result;
		result = this.explorerRepository.findOne(explorerId);
		return result;
	}

	public Explorer findByPrincipal() {
		Explorer result;
		UserAccount userAccount;

		userAccount = LoginService.getPrincipal();
		Assert.notNull(userAccount);
		result = this.findByUserAccount(userAccount);
		Assert.notNull(result);

		return result;

	}

	public Explorer findByUserAccount(final UserAccount userAccount) {
		Assert.notNull(userAccount);
		Explorer result;
		result = this.explorerRepository.findByUserAccountId(userAccount.getId());
		return result;
	}

	// Other business methods
	public Collection<Explorer> findExplorersBySuspicious() {
		Collection<Explorer> result;
		Administrator principal;
		principal = this.administratorService.findByPrincipal();
		Assert.notNull(principal);
		result = this.explorerRepository.findExplorersBySuspicious();
		Assert.notNull(result);
		return result;

	}

}
