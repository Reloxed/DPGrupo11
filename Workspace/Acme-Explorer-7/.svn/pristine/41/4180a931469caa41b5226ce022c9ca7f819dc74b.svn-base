
package services;

import java.util.ArrayList;
import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.RangerRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;
import domain.Administrator;
import domain.Folder;
import domain.Message;
import domain.Ranger;
import domain.SocialIdentity;

@Service
@Transactional
public class RangerService {

	// Managed Repository
	@Autowired
	private RangerRepository		rangerRepository;

	// Supporting services
	@Autowired
	private AdministratorService	administratorService;

	@Autowired
	private FolderService			folderService;


	// Constructors

	public RangerService() {
		super();
	}
	//Auxiliar methods

	// Simple CRUD methods
	public Ranger create() {
		Administrator principal;
		Ranger result;
		
		principal = this.administratorService.findByPrincipal();
		Assert.notNull(principal);
		
		result = this.create();
	
		return result;
	}
	
	
	public Ranger save(final Ranger ranger) {
		Administrator principal;
		final Ranger saved;
		Collection<Folder> folders;
		Collection<SocialIdentity> socialIdentities;
		Collection<Message> sentMessages;
		Collection<Message> receivedMessages;
		Collection<Authority> authorities;
		boolean isAuthorised;
		
		
		principal = this.administratorService.findByPrincipal();
		Assert.notNull(principal);
		
		Assert.notNull(ranger);
		
		if (ranger.getId() == 0) {
			ranger.setIsBanned(false);
			ranger.setIsSuspicious(false);
			folders = this.folderService.createSystemFolders(ranger);
			ranger.setFolders(folders);
			socialIdentities = new ArrayList<SocialIdentity>();
			ranger.setSocialIdentities(socialIdentities);
			sentMessages = new ArrayList<Message>();
			receivedMessages = new ArrayList<Message>();
			ranger.setReceivedMessages(receivedMessages);
			ranger.setSentMessages(sentMessages);
		}
			
			isAuthorised = false;
			authorities = ranger.getUserAccount().getAuthorities();
			for (Authority a : authorities) {
				if (a.getAuthority() == "RANGER") {
					isAuthorised = true;
				}
			}
			
			Assert.isTrue(isAuthorised);
			
			
			
		
		saved = this.rangerRepository.save(ranger);
		Assert.notNull(saved);
		
		return saved;

	}
	public Ranger findOne(final int rangerId) {
		Ranger result;
		result = this.rangerRepository.findOne(rangerId);
		return result;
	}
	
	public Collection<Ranger> findAll() {
		Collection<Ranger> result;
		result = this.rangerRepository.findAll();
		return result;
	}

	// Other business methods
	public Ranger findByPrincipal() {
		Ranger result;
		UserAccount userAccount;

		userAccount = LoginService.getPrincipal();
		Assert.notNull(userAccount);
		result = this.findByUserAccount(userAccount);
		Assert.notNull(result);

		return result;

	}

	public Ranger findByUserAccount(final UserAccount userAccount) {
		Assert.notNull(userAccount);
		Ranger result;
		result = this.rangerRepository.findByUserAccountId(userAccount.getId());
		return result;
	}

	public Collection<Ranger> findRangersBySuspicious() {
		Collection<Ranger> result;
		Administrator principal;
		principal = this.administratorService.findByPrincipal();
		Assert.notNull(principal);
		result = this.rangerRepository.findRangersBySuspicious();
		Assert.notNull(result);
		return result;

	}
}
