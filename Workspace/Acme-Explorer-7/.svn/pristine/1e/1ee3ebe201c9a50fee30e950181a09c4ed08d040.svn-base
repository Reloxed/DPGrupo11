
package services;

import java.util.ArrayList;
import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;


import repositories.SponsorshipRepository;


import domain.Manager;
import domain.Sponsor;
import domain.Sponsorship;
import domain.Trip;


@Service
@Transactional
public class SponsorshipService {

	// Managed Repository
	@Autowired
	private SponsorshipRepository			sponsorshipRepository;

	// Supporting services
	@Autowired
	private SponsorService sponsorService;
	
	@Autowired
	private TripService tripService;

	@Autowired
	private ManagerService managerService;
	
	// Constructors

	public SponsorshipService() {
		super();
	}

	// Simple CRUD methods

	
	public Collection<Sponsorship> findByPrincipal() {
		Collection<Sponsorship> result;
		Sponsor principal;
		
		principal = this.sponsorService.findByPrincipal();
		Assert.notNull(principal);
		
		result = principal.getSponsorships();
	
		
		Assert.notNull(result);
		
		return result;
	}
	
	
	public Sponsorship create() {
		Sponsorship result;
		Sponsor principal;
		
		
		principal = this.sponsorService.findByPrincipal();
		Assert.notNull(principal);

		result = new Sponsorship();
		Assert.notNull(result);

		return result;
	}
	
	
	public Sponsorship save(Sponsorship sponsorship) {
		Sponsorship result;
		Sponsor principal;
		Collection<Trip> trips;
		
		principal = this.sponsorService.findByPrincipal();
		Assert.notNull(principal);
		
		sponsorship.setSponsor(principal);
		
		trips = sponsorship.getTrips();
		
		
		result = this.sponsorshipRepository.save(sponsorship);
		Assert.notNull(result);
		
		for (Trip t: trips) {
			Collection<Sponsorship> sponsorships;
			sponsorships = t.getSponsorships();
			sponsorships.add(sponsorship);
			t.setSponsorships(sponsorships);
			tripService.save(t);
			
		}
		
		return result;
	
	}
	
	
	public void delete(Sponsorship sponsorship) {
		Sponsor sponsor;
		Collection<Trip> trips;
		
		Assert.notNull(sponsorship);
		Assert.isTrue(sponsorship.getId() != 0);
		
		sponsor = this.sponsorService.findByPrincipal();
		Assert.notNull(sponsor);
		
		trips = sponsorship.getTrips();
		
		for (Trip t: trips) {
			Collection<Sponsorship> sponsorships;
			sponsorships = t.getSponsorships();
			sponsorships.remove(sponsorship);
			t.setSponsorships(sponsorships);
			tripService.save(t);
		}
	
		this.sponsorshipRepository.delete(sponsorship);
	
	}
	
	
	public void removeTrip (Sponsorship sponsorship, Trip trip) {
		Manager principal;
		
		Assert.notNull(sponsorship);
		Assert.notNull(trip);
		
		principal = this.managerService.findByPrincipal();
		Assert.notNull(principal);
		
			Collection<Trip> trips = sponsorship.getTrips();
			if (trips.size() > 1) {
				Collection<Trip> updated = new ArrayList<Trip>(trips);
				updated.remove(trip);
				sponsorship.setTrips(updated);
			} else {
				this.sponsorshipRepository.delete(sponsorship);
		}
	}
	
	
	
	

	// Other business methods
	
 
	
}
