
package services;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.ManagerRepository;
import security.LoginService;
import security.UserAccount;
import domain.Administrator;
import domain.Manager;

@Service
@Transactional
public class ManagerService {

	// Managed Repository
	@Autowired
	private ManagerRepository		managerRepository;

	// Supporting services
	@Autowired
	private AdministratorService	administratorService;


	// Constructors

	public ManagerService() {
		super();
	}

	// Simple CRUD methods
	public Manager findOne(final int managerId) {
		Manager result;
		result = this.managerRepository.findOne(managerId);
		return result;
	}

	//Other business methods
	public Manager findByPrincipal() {
		Manager result;
		UserAccount userAccount;

		userAccount = LoginService.getPrincipal();
		Assert.notNull(userAccount);
		result = this.findByUserAccount(userAccount);
		Assert.notNull(result);

		return result;

	}

	public Manager findByUserAccount(final UserAccount userAccount) {
		Assert.notNull(userAccount);
		Manager result;
		result = this.managerRepository.findByUserAccountId(userAccount.getId());
		return result;
	}

	public Collection<Manager> findManagersBySuspicious() {
		Collection<Manager> result;
		Administrator principal;
		principal = this.administratorService.findByPrincipal();
		Assert.notNull(principal);
		result = this.managerRepository.findManagersBySuspicious();
		Assert.notNull(result);
		return result;

	}

	public Double ratioSuspiciousManagers() {
		Administrator principal;
		Double result;

		principal = this.administratorService.findByPrincipal();
		Assert.notNull(principal);

		result = this.managerRepository.ratioSuspiciousManagers();
		Assert.notNull(result);

		return result;
	}

}
